<UserControl x:Class="RackMonitor.UserControls.ToggleButton"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:RackMonitor.UserControls"
             xmlns:converters="clr-namespace:RackMonitor.Converters"
             mc:Ignorable="d"
             d:DesignHeight="50" d:DesignWidth="125"
             x:Name="RootToggleButtonControl">
    <UserControl.Resources>
        <!-- Include the converter -->
        <converters:DivideByValueConverter x:Key="RadiusConverter" Divisor="2"/>

        <Style x:Key="FocusVisual">
            <!-- ... unchanged ... -->
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- ... other brushes ... -->
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

        <!-- Updated Style for ToggleButton -->
        <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <!-- Stretch content -->
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <!-- Stretch content -->
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <!-- Border now uses dynamic CornerRadius -->
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <Border.CornerRadius>
                                <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" Converter="{StaticResource RadiusConverter}"/>
                            </Border.CornerRadius>
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- ... other triggers ... -->
                            <Trigger Property="Button.IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <!-- Let the Grid fill the UserControl -->
    <Grid>
        <!-- ToggleButton fills the Grid, removed fixed sizes -->
        <ToggleButton VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                      x:Name="InnerToggleButton"
                      IsChecked="{Binding IsOn, ElementName=RootToggleButtonControl, Mode=TwoWay}">

            <!-- This style applies the color change -->
            <ToggleButton.Style>
                <Style TargetType="ToggleButton" BasedOn="{StaticResource ToggleButtonStyle}">
                    <!-- Default state (unchecked) -->
                    <Setter Property="Background" Value="Gray"/>
                    <Style.Triggers>
                        <!-- Checked state -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#FF448AFF"/>
                        </Trigger>
                        <!-- Added MouseOver trigger for better feedback -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </ToggleButton.Style>

            <!-- Use a Grid to contain the knob, Margin provides padding -->
            <Grid x:Name="KnobContainerGrid" Margin="3">
                <!-- Ellipse (knob) -->
                <Ellipse Fill="White">
                    <Ellipse.Style>
                        <Style TargetType="Ellipse">
                            <!-- Default state (unchecked) -->
                            <Setter Property="HorizontalAlignment" Value="Left"/>
                            <!-- Bind Height to container's ActualHeight -->
                            <Setter Property="Height" Value="{Binding ActualHeight, ElementName=KnobContainerGrid}"/>
                            <!-- Bind Width to own Height to keep it circular -->
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}"/>
                            <Style.Triggers>
                                <!-- Checked state: Bind to the ToggleButton's IsChecked property -->
                                <DataTrigger Binding="{Binding IsChecked, ElementName=InnerToggleButton}" Value="True">
                                    <Setter Property="HorizontalAlignment" Value="Right"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Ellipse.Style>
                </Ellipse>
            </Grid>
        </ToggleButton>
    </Grid>
</UserControl>

